[
    {
        "label": "SparseMatrix",
        "kind": 6,
        "importPath": "sparse_matrix.script",
        "description": "sparse_matrix.script",
        "peekOfCode": "class SparseMatrix:\n    def __init__(self, file_path=None, num_rows=None, num_cols=None):\n        self.elements = {}\n        if file_path:\n            self._from_file(file_path)\n        elif num_rows is not None and num_cols is not None:\n            self.num_rows = num_rows\n            self.num_cols = num_cols\n        else:\n            raise ValueError(\"Provide either a file path or dimensions for the matrix.\")",
        "detail": "sparse_matrix.script",
        "documentation": {}
    },
    {
        "label": "get_matrix_input",
        "kind": 2,
        "importPath": "sparse_matrix.script",
        "description": "sparse_matrix.script",
        "peekOfCode": "def get_matrix_input(prompt):\n    file_path = input(prompt)\n    return SparseMatrix(file_path=file_path)\ndef perform_operation(matrix1, matrix2, operation):\n    if operation == '1':\n        return matrix1.add(matrix2)\n    elif operation == '2':\n        return matrix1.subtract(matrix2)\n    elif operation == '3':\n        return matrix1.multiply(matrix2)",
        "detail": "sparse_matrix.script",
        "documentation": {}
    },
    {
        "label": "perform_operation",
        "kind": 2,
        "importPath": "sparse_matrix.script",
        "description": "sparse_matrix.script",
        "peekOfCode": "def perform_operation(matrix1, matrix2, operation):\n    if operation == '1':\n        return matrix1.add(matrix2)\n    elif operation == '2':\n        return matrix1.subtract(matrix2)\n    elif operation == '3':\n        return matrix1.multiply(matrix2)\n    else:\n        raise ValueError(\"Invalid operation selected\")\ndef main():",
        "detail": "sparse_matrix.script",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "sparse_matrix.script",
        "description": "sparse_matrix.script",
        "peekOfCode": "def main():\n    print(\"Sparse Matrix Operations\")\n    print(\"1. Addition\")\n    print(\"2. Subtraction\")\n    print(\"3. Multiplication\")\n    operation = input(\"Select an operation (1/2/3): \")\n    if operation not in {'1', '2', '3'}:\n        print(\"Invalid selection. Exiting.\")\n        return\n    matrix1 = get_matrix_input(\"Enter the path for the first matrix file: \")",
        "detail": "sparse_matrix.script",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "unique_int_sample_01",
        "description": "unique_int_sample_01",
        "peekOfCode": "def main(input_file, output_file):\n    # Read integers from input file, preserving order\n    integers = []\n    max_integer = 1026  # Maximum integer in the sample input\n    seen_integers = []  # To keep track of seen integers\n    with open(input_file, 'r') as f:\n        for line in f:\n            line = line.strip()\n            if line:  # Check if the line is not empty\n                try:",
        "detail": "unique_int_sample_01",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "unique_int_sample_02",
        "description": "unique_int_sample_02",
        "peekOfCode": "def main(input_file, output_file):\n    # Read integers from input file, preserving order\n    integers = []\n    max_integer = 1026\n    seen_integers = []  # To keep track of seen integers\n    with open(input_file, 'r') as f:\n        for line in f:\n            line = line.strip()\n            if line:  # Check if the line is not empty\n                try:",
        "detail": "unique_int_sample_02",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "unique_int_sample_03",
        "description": "unique_int_sample_03",
        "peekOfCode": "def main(input_file, output_file):\n    # Read integers from input file, preserving order\n    integers = []\n    max_integer = 1026\n    seen_integers = []  # To keep track of seen integers\n    with open(input_file, 'r') as f:\n        for line in f:\n            line = line.strip()\n            if line:  # Check if the line is not empty\n                try:",
        "detail": "unique_int_sample_03",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "unique_int_sample_04",
        "description": "unique_int_sample_04",
        "peekOfCode": "def main(input_file, output_file):\n    # Read integers from input file, preserving order\n    integers = []\n    max_integer = 1026\n    seen_integers = []  # To keep track of seen integers\n    with open(input_file, 'r') as f:\n        for line in f:\n            line = line.strip()\n            if line:  # Check if the line is not empty\n                try:",
        "detail": "unique_int_sample_04",
        "documentation": {}
    },
    {
        "label": "find_unique_integers",
        "kind": 2,
        "importPath": "unique_int_small_samp1",
        "description": "unique_int_small_samp1",
        "peekOfCode": "def find_unique_integers(integers):\n    unique_integers = []\n    seen = [False] * (max(integers) + 1)  # Array to mark seen integers\n    for num in integers:\n        if not seen[num]:\n            unique_integers.append(num)\n            seen[num] = True\n    return unique_integers\ndef custom_sort(integers):\n    for i in range(len(integers)):",
        "detail": "unique_int_small_samp1",
        "documentation": {}
    },
    {
        "label": "custom_sort",
        "kind": 2,
        "importPath": "unique_int_small_samp1",
        "description": "unique_int_small_samp1",
        "peekOfCode": "def custom_sort(integers):\n    for i in range(len(integers)):\n        for j in range(i + 1, len(integers)):\n            if integers[i] > integers[j]:\n                integers[i], integers[j] = integers[j], integers[i]\ndef main(input_file, output_file):\n    # Read integers from input file, preserving order\n    integers = []\n    seen_integers = []  # To keep track of seen integers\n    with open(input_file, 'r') as f:",
        "detail": "unique_int_small_samp1",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "unique_int_small_samp1",
        "description": "unique_int_small_samp1",
        "peekOfCode": "def main(input_file, output_file):\n    # Read integers from input file, preserving order\n    integers = []\n    seen_integers = []  # To keep track of seen integers\n    with open(input_file, 'r') as f:\n        for line in f:\n            line = line.strip()\n            if line:  # Check if the line is not empty\n                try:\n                    integer = int(line)",
        "detail": "unique_int_small_samp1",
        "documentation": {}
    },
    {
        "label": "find_unique_integers",
        "kind": 2,
        "importPath": "unique_int_small_samp2",
        "description": "unique_int_small_samp2",
        "peekOfCode": "def find_unique_integers(integers):\n    unique_integers = []\n    seen = [False] * (max(integers) + 1)  # Array to mark seen integers\n    for num in integers:\n        if not seen[num]:\n            unique_integers.append(num)\n            seen[num] = True\n    return unique_integers\ndef custom_sort(integers):\n    for i in range(len(integers)):",
        "detail": "unique_int_small_samp2",
        "documentation": {}
    },
    {
        "label": "custom_sort",
        "kind": 2,
        "importPath": "unique_int_small_samp2",
        "description": "unique_int_small_samp2",
        "peekOfCode": "def custom_sort(integers):\n    for i in range(len(integers)):\n        for j in range(i + 1, len(integers)):\n            if integers[i] > integers[j]:\n                integers[i], integers[j] = integers[j], integers[i]\ndef main(input_file, output_file):\n    # Read integers from input file, preserving order\n    integers = []\n    seen_integers = []  # To keep track of seen integers\n    with open(input_file, 'r') as f:",
        "detail": "unique_int_small_samp2",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "unique_int_small_samp2",
        "description": "unique_int_small_samp2",
        "peekOfCode": "def main(input_file, output_file):\n    # Read integers from input file, preserving order\n    integers = []\n    seen_integers = []  # To keep track of seen integers\n    with open(input_file, 'r') as f:\n        for line in f:\n            line = line.strip()\n            if line:  # Check if the line is not empty\n                try:\n                    integer = int(line)",
        "detail": "unique_int_small_samp2",
        "documentation": {}
    },
    {
        "label": "custom_sort",
        "kind": 2,
        "importPath": "unique_int_small_samp3",
        "description": "unique_int_small_samp3",
        "peekOfCode": "def custom_sort(integers):\n    for i in range(len(integers)):\n        for j in range(i + 1, len(integers)):\n            if integers[i] > integers[j]:\n                integers[i], integers[j] = integers[j], integers[i]\ndef main(input_file, output_file):\n    # Read integers from input file, preserving order\n    integers = []\n    seen_integers = []  # To keep track of seen integers\n    with open(input_file, 'r') as f:",
        "detail": "unique_int_small_samp3",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "unique_int_small_samp3",
        "description": "unique_int_small_samp3",
        "peekOfCode": "def main(input_file, output_file):\n    # Read integers from input file, preserving order\n    integers = []\n    seen_integers = []  # To keep track of seen integers\n    with open(input_file, 'r') as f:\n        for line in f:\n            line = line.strip()\n            if line:  # Check if the line is not empty\n                try:\n                    integer = int(line)",
        "detail": "unique_int_small_samp3",
        "documentation": {}
    },
    {
        "label": "custom_sort",
        "kind": 2,
        "importPath": "unique_int_small_samp4",
        "description": "unique_int_small_samp4",
        "peekOfCode": "def custom_sort(integers):\n    for i in range(len(integers)):\n        for j in range(i + 1, len(integers)):\n            if integers[i] > integers[j]:\n                integers[i], integers[j] = integers[j], integers[i]\ndef main(input_file, output_file):\n    # Read integers from input file, preserving order\n    integers = []\n    seen_integers = []  # To keep track of seen integers\n    with open(input_file, 'r') as f:",
        "detail": "unique_int_small_samp4",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "unique_int_small_samp4",
        "description": "unique_int_small_samp4",
        "peekOfCode": "def main(input_file, output_file):\n    # Read integers from input file, preserving order\n    integers = []\n    seen_integers = []  # To keep track of seen integers\n    with open(input_file, 'r') as f:\n        for line in f:\n            line = line.strip()\n            if line:  # Check if the line is not empty\n                try:\n                    integer = int(line)",
        "detail": "unique_int_small_samp4",
        "documentation": {}
    }
]